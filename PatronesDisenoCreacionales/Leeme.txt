///////Builder ///////

Separar la construcción de un objeto complejo de su representación para que el mismo proceso de construcción pueda crear diferentes representaciones

///////Explicación///////

-------Ejemplo de la vida real-------

Imagina un generador de personajes para un juego de rol.La opcion más facil es dejar a la computadora cree el personaje para usted. Pero si quieres seleccionar los detalles del personaje como profesión, género, color de cabello, etc., la generación de personajes se convierte en un proceso paso a paso que se completa cuando todas las selecciones están listas.

En otras palabras:

Le permite crear diferentes configuraciones de un objeto evitando la contaminación del constructor. Útil cuando puede haber varias configuraciones de un objeto. O cuando hay un montón de pasos involucrados en la creación de un objeto.

Wikipedia dice:

El patrón del constructor es un patrón de diseño de software de creación de objetos con las intenciones de encontrar una solución al anti-patrón del constructor telescópico.
Dicho esto, permítanme añadir un poco sobre lo que el constructor telescópico anti-patrón es. En un momento u otro hemos visto un constructor como el siguiente:
      public Hero(Profession profession, String name, HairType hairType, HairColor hairColor, Armor armor, Weapon weapon) 
      {
      }
Como puede ver, el número de parámetros del constructor puede salir rápidamente de la mano y puede ser difícil entender la disposición de los parámetros. Además, esta lista de parámetros podría seguir creciendo si desea añadir más opciones en el futuro. Esto se llama constructor telescópico anti-patrón.

Ejemplo programático

La alternativa sana es utilizar el patrón Builder. En primer lugar tenemos a nuestro héroe que queremos crear:

public final class Hero
{
  private final Profession profession;
  private final String name;
  private final HairType hairType;
  private final HairColor hairColor;
  private final Armor armor;
  private final Weapon weapon;

  private Hero(Builder builder)
  {
    this.profession = builder.profession;
    this.name = builder.name;
    this.hairColor = builder.hairColor;
    this.hairType = builder.hairType;
    this.weapon = builder.weapon;
    this.armor = builder.armor;
  }
}

y luego tenemos el constructor

public static class Builder {
    private final Profession profession;
    private final String name;
    private HairType hairType;
    private HairColor hairColor;
    private Armor armor;
    private Weapon weapon;

    public Builder(Profession profession, String name) {
      if (profession == null || name == null) {
        throw new IllegalArgumentException("profession and name can not be null");
      }
      this.profession = profession;
      this.name = name;
    }

    public Builder withHairType(HairType hairType) {
      this.hairType = hairType;
      return this;
    }

    public Builder withHairColor(HairColor hairColor) {
      this.hairColor = hairColor;
      return this;
    }

    public Builder withArmor(Armor armor) {
      this.armor = armor;
      return this;
    }

    public Builder withWeapon(Weapon weapon) {
      this.weapon = weapon;
      return this;
    }

    public Hero build() {
      return new Hero(this);
    }
  }
  y se puede usar como :
  Hero mage = new Hero.Builder(Profession.MAGE, "Riobard").withHairColor(HairColor.BLACK).withWeapon(Weapon.DAGGER).build();
